<?xml version="1.0"?>
<project name="TechDivision_Resources" default="deploy" basedir=".">
	<property file="${basedir}/build.properties"/>
	<property file="${basedir}/build.default.properties"/>
    <property file="${basedir}/build.${os.family}.properties"/>
	<property environment="env" />
	<property name="namespace" value="TechDivision" />
	<property name="module" value="Resources"/>
	<property name="unique.name" value="${namespace}/${module}" />
	<property name="php-src.dir" value="${basedir}/src" />
	<property name="php-test.dir" value="${basedir}/tests" />
	<property name="php-target.dir" value="${basedir}/target"/>
	<!-- ==================================================================== -->
	<!-- Cleans the directories with the generated source files				  -->
	<!-- ==================================================================== -->
	<target name="clean" description="Cleans almost everything, so use carefully.">
		<delete dir="${php-target.dir}" includeemptydirs="true" quiet="false" verbose="true" failonerror="true"/>
	</target>
	<!-- ==================================================================== -->
	<!-- Prepares all the required directories								  -->
	<!-- ==================================================================== -->
	<target name="prepare" depends="clean" description="Prepares all the required directories.">
        <mkdir dir="${php-target.dir}" />
        <mkdir dir="${php-target.dir}/reports" />
        <mkdir dir="${php-target.dir}/reports/coverage" />
	</target>
	<!-- ==================================================================== -->
	<!-- Copies the sources to the target directory							  -->
	<!-- ==================================================================== -->
	<target name="copy" depends="prepare" description="Copies the sources to the target directory.">
		<copy todir="${php-target.dir}/${namespace}/${module}" preservelastmodified="true">
			<fileset dir="${php-src.dir}/${unique.name}">
				<include name="**/*" />
			</fileset>
        	<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>
	<!-- ==================================================================== -->
	<!-- Copies the sources to the deploy directory     					  -->
	<!-- ==================================================================== -->
	<target name="deploy" depends="copy" description="Copies the sources to the deploy directory.">		
		<copy todir="${deploy.dir}" preservelastmodified="true">
			<fileset dir="${php-target.dir}">
				<include name="${namespace}/${module}/**/*"/>
			</fileset>
		</copy>
		<copy todir="${deploy.dir}/www" preservelastmodified="true">
			<fileset dir="${php-target.dir}">
				<include name="index.php"/>
				<include name=".htaccess"/>
				<include name="design/**/*"/>
			</fileset>
		</copy>
		<copy todir="${deploy.dir}/data/${namespace}_${module}" preservelastmodified="true">
			<fileset dir="${php-target.dir}/">
				<include name="META-INF/**/*"/>
				<include name="WEB-INF/**/*"/>
			</fileset>
		</copy>
	</target>	
    <!-- ==================================================================== -->
    <!-- Generates the PEAR package                                           -->
    <!-- ==================================================================== -->
    <target name="create-package" depends="copy" description="Generates the PEAR package.">
		<tstamp>  
		 	<format property="actual.date" pattern="yyyy-MM-dd" locale="en" />  
		</tstamp>
		<tstamp>  
		 	<format property="actual.time" pattern="hh:mm:ss" locale="en" />  
		</tstamp>
        <copy tofile="${php-target.dir}/package2.xml" file="${basedir}/pear/package2.xml">
        	<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
		<exec dir="${php-target.dir}" executable="${bin.dir}/pear">
			<arg line="techdivision-contents -T ${php-target.dir}/package2.xml -S ${php-target.dir} -D ${php-target.dir} -M ${unique.name}"/>
		</exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
        	<arg line="package package2.xml"/>
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Generates the API documentation                                      -->
    <!-- ==================================================================== -->   
    <target name="apidoc" depends="copy" description="Generates the API documentation.">
         <exec executable="${bin.dir}/phpdoc">  
            <arg line="-ct type -ue on -s on -t ${php-target.dir}/docs -o HTML:frames:earthli -d ${php-src.dir}"/>  
         </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the code sniffer and generates a report                         -->
    <!-- ==================================================================== -->
    <target name="phpcs" depends="apidoc" description="Runs the code sniffer and generates a report.">
        <exec executable="${bin.dir}/phpcs" output="${php-target.dir}/reports/checkstyle.xml">
            <arg line="--standard=ZEND --report=checkstyle ${php-src.dir}"/>
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the copy and paste detection                                    -->
    <!-- ==================================================================== -->
    <target name="phpcpd" depends="phpcs" description="Runs the copy and paste detection.">
        <exec executable="${bin.dir}/phpcpd">
            <arg line="--log-pmd ${php-target.dir}/reports/pmd-cpd.xml ${php-src.dir}"/>
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Generate phploc.csv                                                  -->
    <!-- ==================================================================== -->
    <target name="phploc" depends="phpcpd" description="Generate phploc.csv">
        <exec executable="${bin.dir}/phploc">
            <arg line="--log-xml ${php-target.dir}/reports/phploc.xml ${php-src.dir}"/>
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the PHPDepend tool and generats a graphs                        -->
    <!-- ==================================================================== -->
    <target name="pdepend" depends="phploc" description="Runs the PHPDepend tool and generats a graphs.">
        <exec executable="${bin.dir}/pdepend">
            <arg line="--summary-xml=${php-target.dir}/reports/pdepend.xml --jdepend-xml=${php-target.dir}/reports/jdepend.xml --jdepend-chart=${php-target.dir}/reports/jdepend.svg --overview-pyramid=${php-target.dir}/reports/pdepend-pyramid.svg ${php-src.dir}" />
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the PHP mess detector tool                                      -->
    <!-- ==================================================================== -->
    <target name="phpmd" depends="pdepend" description="Runs the PHP Mess detector tool.">
        <exec executable="${bin.dir}/phpmd">
            <arg line="${php-src.dir} xml codesize,unusedcode --reportfile ${php-target.dir}/reports/pmd.xml" />
        </exec>
    </target>
	<!-- ==================================================================== -->
	<!-- Copies the test sources to the target directory					  -->
	<!-- ==================================================================== -->
	<target name="copy-tests" depends="phpmd" description="Copies the test sources to the target directory.">
		<copy todir="${php-target.dir}">
			<fileset dir="${php-test.dir}">
				<include name="**/*" />
			</fileset>
			<filterchain>
				<expandproperties/>
			</filterchain>
		</copy>
	</target>
    <!-- ==================================================================== -->
    <!-- Prepares the PEAR channel in the target directory, necessary for the -->
    <!-- packages this project is related                                     -->
    <!-- ==================================================================== -->
    <target name="prepare-pear" depends="copy-tests" description="Prepares the PEAR channel in the target directory, necessary for the packages this project is related.">
        <!-- initialize the PEAR directory -->
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="config-create" />
            <arg value="${php-target.dir}/" />
            <arg value=".pearrc" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="config-set" />
            <arg value="data_dir" />
            <arg value="pear/php/data" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="config-set" />
            <arg value="preferred_state" />
            <arg value="alpha" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="PEAR" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="MDB2-2.4.1" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="MDB2_Driver_mysqli-1.4.1" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="Spreadsheet_Excel_Writer" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="channel-update" />
            <arg value="pear.php.net" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="channel-discover" />
            <arg value="pear.appserver.io/library" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="library/TechDivision_Resources" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="library/TechDivision_Logger" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="library/TechDivision_HttpUtils" />
        </exec>
        <exec dir="${php-target.dir}" executable="${bin.dir}/pear">
            <arg value="-c" />
            <arg value=".pearrc" />
            <arg value="install" />
            <arg value="library/TechDivision_XHProfPHPUnit" />
        </exec>
    </target>
    <!-- ==================================================================== -->
    <!-- Drops the test database, if exists                                                                                                                         -->
    <!-- ==================================================================== -->
    <target name="drop-database" depends="prepare-pear" description="Drops the test database, if exists.">
        <sql 
            driver="${sql.driver}" 
        	url="${sql.url}" 
        	userid="${sql.user}" 
        	password="${sql.pass}" 
        	classpath="${basedir}/lib/mysql-connector-java-5.1.8-bin.jar" 
        	src="${php-target.dir}/${namespace}/${module}/sql/drop-database.sql" />
    </target>
    <!-- ==================================================================== -->
    <!-- Creates the test database                                                                                                                                     -->
    <!-- ==================================================================== -->
    <target name="create-database" depends="drop-database" description="Creates the test database.">
        <sql 
            driver="${sql.driver}" 
        	url="${sql.url}" 
        	userid="${sql.user}" 
        	password="${sql.pass}" 
        	classpath="${basedir}/lib/mysql-connector-java-5.1.8-bin.jar" 
        	src="${php-target.dir}/${namespace}/${module}/sql/create-database.sql" />
    </target>
    <!-- ==================================================================== -->
    <!-- Runs the PHPUnit tests and generates a report                        -->
    <!-- ==================================================================== -->
    <target name="run-tests" depends="create-database" description="Runs the PHPUnit tests and generates a report.">
        <exec executable="${bin.dir}/phpunit" dir="${php-target.dir}">
            <arg line="--log-junit ${php-target.dir}/reports/phpunit.xml --coverage-clover ${php-target.dir}/reports/coverage/clover.xml --coverage-html ${php-target.dir}/reports/coverage/ ${namespace}/${module}/AllTests" />
        </exec>
    </target>
	<!-- ==================================================================== -->
	<!-- Runs the PHPUnit tests and generates a report						  -->
	<!-- ==================================================================== -->
	<target name="build" depends="run-tests" description="Runs the PHPUnit tests and generates a report.">
		<!-- add Hudson build here -->
	</target>
    <!-- ==================================================================== -->
    <!-- Upload current release version to PEAR Channel                       -->
    <!-- ==================================================================== -->
    <target name="upload-release" >
        <echo message="Releasing ${namespace}_${module}-${release.version}.tgz on ${pear.channel}..."/>
    	<exec executable="${curl.bin}"  outputproperty="exec.response">
			<arg line='-F hash="${pear.api.hash}" -F qqfile=@"${php-target.dir}/${namespace}_${module}-${release.version}.tgz" -s http://${pear.channel}/upload'/>
		</exec>
		<echo>${exec.response}</echo>
    </target>
    <!-- ==================================================================== -->
    <!-- Release new patch version                                            -->
    <!-- ==================================================================== -->
    <target name="version-release" >
        <taskdef resource="net/sf/antcontrib/antlib.xml"/>
        <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
        <echo message="Preparing new version release" />
        <exec executable="awk" output="${basedir}/build.default.properties">
            <arg line="'BEGIN{FS=&quot;.&quot;} {if ($1 ~ /release/ &amp;&amp; $2 ~ /version/) print $1 &quot;.&quot; $2 &quot;.&quot; $3 &quot;.&quot; ++$4;else print}' ${basedir}/build.default.properties" />
        </exec>
        <property file="${basedir}/build.default.properties" prefix="new"/>
        <var name="release.version" unset="true"/>
        <propertycopy name="release.version" from="new.release.version" />
        <input message="Please enter changelog for release version ${release.version}:" addproperty="release.changelog" defaultvalue="- New release version"/>
        <tstamp>
            <format property="actual.date" pattern="yyyy-MM-dd" locale="en" />
            <format property="actual.time" pattern="hh:mm:ss" locale="en" />
        </tstamp>
        <xmltask source="${basedir}/pear/package2.xml" dest="${basedir}/pear/package2.xml">
            <replace path="/:package/:notes/text()" withXml="${release.changelog}"/>
            <insert path="/*[local-name()='package']/*[local-name()='changelog']/*[local-name()='release'][1]" position="before">
                <![CDATA[<release>
                    <version>
                        <release>${release.version}</release>
                        <api>${api.version}</api>
                    </version>
                    <stability>
                        <release>${release.stability}</release>
                        <api>${api.stability}</api>
                    </stability>
                    <date>${actual.date}</date>
                    <license uri="http://www.gnu.org/licenses/gpl-2.0.html">GPL, version 2.0</license>
                    <notes>
                        ${release.changelog}
                    </notes>
                </release>]]>
            </insert>
        </xmltask>        
        <propertyregex property="tag.release.version" input="${release.version}" regexp="\." replace="-" casesensitive="true"/>
        <exec executable="${git.bin}" dir="${basedir}">
            <arg line="commit -a -m '${release.changelog}'" />
        </exec>
		<exec executable="${git.bin}" dir="${basedir}">
			<arg line="push" />
		</exec>
        <exec executable="${git.bin}" dir="${basedir}">
            <arg line="tag -a -m '${release.changelog}' release-${tag.release.version}" />
        </exec>
		<exec executable="${git.bin}" dir="${basedir}">
			<arg line="push ${github.url} tag release-${tag.release.version}" />
		</exec>
        <antcall target="create-package"/>
        <antcall target="upload-release"/>
        <echo message="${namespace} Version ${release.version} released." />
    </target>
</project>